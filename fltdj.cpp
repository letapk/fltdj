// generated by Fast Light User Interface Designer (fluid) version 1.0308

#include "fltdj.h"

Fl_Double_Window *alertwin=(Fl_Double_Window *)0;

Fl_Output *alertbox=(Fl_Output *)0;

Fl_Button *alertbutton=(Fl_Button *)0;

Fl_Double_Window *mainwin=(Fl_Double_Window *)0;

Fl_Group *calgroup=(Fl_Group *)0;

Fl_Clock *Oclock=(Fl_Clock *)0;

Fl_Box *yeartext=(Fl_Box *)0;

Fl_Button *yeardownbutton=(Fl_Button *)0;

Fl_Button *yearupbutton=(Fl_Button *)0;

Fl_Box *monthtext=(Fl_Box *)0;

Fl_Button *monthdownbutton=(Fl_Button *)0;

Fl_Button *monthupbutton=(Fl_Button *)0;

Fl_Button *day[38]={(Fl_Button *)0};

Fl_Box *currentdate=(Fl_Box *)0;

Fl_Button *exitbut=(Fl_Button *)0;

Fl_Button *helpbut=(Fl_Button *)0;

CMultiTabs *basetab=(CMultiTabs *)0;

Fl_Group *journaltab=(Fl_Group *)0;

Fl_Button *prevnote=(Fl_Button *)0;

Fl_Button *nextnote=(Fl_Button *)0;

Fl_Box *notedaydatedisplayed1=(Fl_Box *)0;

Fl_Box *todaysholiday1=(Fl_Box *)0;

Fl_Text_Editor *noteditor=(Fl_Text_Editor *)0;

Fl_Group *apptab=(Fl_Group *)0;

Fl_Box *notedaydatedisplayed2=(Fl_Box *)0;

Fl_Box *todaysholiday2=(Fl_Box *)0;

Fl_Box *appttime[10]={(Fl_Box *)0};

Fl_Box *apptname[10]={(Fl_Box *)0};

Fl_Int_Input *appttimein=(Fl_Int_Input *)0;

Fl_Input *apptnamein=(Fl_Input *)0;

Fl_Button *apptaddbut=(Fl_Button *)0;

Fl_Button *apptmodifybut=(Fl_Button *)0;

Fl_Button *apptdeletebut=(Fl_Button *)0;

Fl_Button *apptprevbut=(Fl_Button *)0;

Fl_Button *apptnextbut=(Fl_Button *)0;

Fl_Box *apptnum=(Fl_Box *)0;

Fl_Button *prevdayapp=(Fl_Button *)0;

Fl_Button *nextdayapp=(Fl_Button *)0;

Fl_Group *contab=(Fl_Group *)0;

Fl_Box *contactkey=(Fl_Box *)0;

Fl_Button *contactkeylistbut=(Fl_Button *)0;

Fl_Text_Editor *contacteditor=(Fl_Text_Editor *)0;

Fl_Select_Browser *contactkeylist=(Fl_Select_Browser *)0;

Fl_Button *contactprevbut=(Fl_Button *)0;

Fl_Button *contactnextbut=(Fl_Button *)0;

Fl_Box *contactnum=(Fl_Box *)0;

Fl_Button *contactaddbut=(Fl_Button *)0;

Fl_Button *contactmodifybut=(Fl_Button *)0;

Fl_Button *contactdeletebut=(Fl_Button *)0;

Fl_Group *todotab=(Fl_Group *)0;

Fl_Text_Editor *todoeditor=(Fl_Text_Editor *)0;

Fl_Group *holtab=(Fl_Group *)0;

Fl_Box *holdate[10]={(Fl_Box *)0};

Fl_Box *holmonth[10]={(Fl_Box *)0};

Fl_Box *holtext[10]={(Fl_Box *)0};

Fl_Int_Input *holdatein=(Fl_Int_Input *)0;

Fl_Int_Input *holmonthin=(Fl_Int_Input *)0;

Fl_Input *holtextin=(Fl_Input *)0;

Fl_Button *holaddbut=(Fl_Button *)0;

Fl_Button *holdeletebut=(Fl_Button *)0;

Fl_Button *holprevbut=(Fl_Button *)0;

Fl_Button *holnextbut=(Fl_Button *)0;

Fl_Box *holnum=(Fl_Box *)0;

Fl_Group *searchtab=(Fl_Group *)0;

Fl_Output *searchtext=(Fl_Output *)0;

Fl_Browser *journalsearchresultlist=(Fl_Browser *)0;

Fl_Browser *apptsearchresultlist=(Fl_Browser *)0;

Fl_Group *preftab=(Fl_Group *)0;

Fl_Button *applybut=(Fl_Button *)0;

Fl_Button *savebut=(Fl_Button *)0;

Fl_Check_Button *fortune=(Fl_Check_Button *)0;

Fl_Box *fonttextbox=(Fl_Box *)0;

Fl_Slider *fontsizeslider=(Fl_Slider *)0;

Fl_Slider *fontslider=(Fl_Slider *)0;

Fl_Group *helptab=(Fl_Group *)0;

Fl_Help_View *help=(Fl_Help_View *)0;

Fl_Group *abouttab=(Fl_Group *)0;

Fl_Text_Display *gnugplicense=(Fl_Text_Display *)0;

Fl_Group *findgroup=(Fl_Group *)0;

Fl_Button *findbut=(Fl_Button *)0;

Fl_Input *findtextbox=(Fl_Input *)0;

Fl_Double_Window* create_the_ui() {
  { alertwin = new Fl_Double_Window(349, 104, "The Daily Journal - Appointment");
    alertwin->color((Fl_Color)93);
    { alertbox = new Fl_Output(15, 25, 320, 40, "Alert!");
      alertbox->tooltip("This is your next Appointment");
      alertbox->type(12);
      alertbox->color(FL_WHITE);
      alertbox->labelfont(1);
      alertbox->labelcolor((Fl_Color)4);
      alertbox->textfont(9);
      alertbox->textcolor((Fl_Color)4);
      alertbox->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* alertbox
    { alertbutton = new Fl_Button(130, 70, 90, 30, "&OK");
      alertbutton->tooltip("Click to close this window");
      alertbutton->color((Fl_Color)94);
      alertbutton->labelcolor((Fl_Color)4);
      alertbutton->callback((Fl_Callback*)alert_cb);
    } // Fl_Button* alertbutton
    alertwin->end();
  } // Fl_Double_Window* alertwin
  { mainwin = new Fl_Double_Window(740, 320, "The Daily Journal");
    mainwin->labelfont(1);
    mainwin->callback((Fl_Callback*)window_cb);
    { Fl_Group* o = calgroup = new Fl_Group(0, 5, 150, 315);
      calgroup->box(FL_FLAT_BOX);
      { Oclock = new Fl_Clock(45, 10, 60, 60);
        Oclock->tooltip("Time marches on");
        Oclock->box(FL_ROUND_UP_BOX);
        Oclock->color(FL_LIGHT2);
        Oclock->selection_color(FL_FOREGROUND_COLOR);
        Oclock->align(Fl_Align(FL_ALIGN_CENTER));
      } // Fl_Clock* Oclock
      { yeartext = new Fl_Box(25, 70, 100, 20);
        yeartext->tooltip("Year which is being viewed");
        yeartext->box(FL_EMBOSSED_BOX);
        yeartext->color((Fl_Color)48);
        yeartext->selection_color(FL_LIGHT1);
        yeartext->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* yeartext
      { yeardownbutton = new Fl_Button(5, 70, 20, 20, "@<");
        yeardownbutton->tooltip("Previous year");
        yeardownbutton->shortcut(0x80079);
        yeardownbutton->color(FL_INACTIVE_COLOR);
        yeardownbutton->selection_color(FL_LIGHT1);
        yeardownbutton->labelcolor(FL_LIGHT1);
        yeardownbutton->callback((Fl_Callback*)cal, (void*)(0));
      } // Fl_Button* yeardownbutton
      { yearupbutton = new Fl_Button(125, 70, 20, 20, "@>");
        yearupbutton->tooltip("Next year");
        yearupbutton->shortcut(0x80059);
        yearupbutton->color(FL_INACTIVE_COLOR);
        yearupbutton->selection_color(FL_LIGHT1);
        yearupbutton->labelcolor(FL_LIGHT1);
        yearupbutton->callback((Fl_Callback*)cal, (void*)(0));
      } // Fl_Button* yearupbutton
      { monthtext = new Fl_Box(25, 90, 100, 20);
        monthtext->tooltip("Month which is being viewed");
        monthtext->box(FL_EMBOSSED_BOX);
        monthtext->color((Fl_Color)51);
        monthtext->selection_color(FL_LIGHT1);
        monthtext->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* monthtext
      { monthdownbutton = new Fl_Button(5, 90, 20, 20, "@<");
        monthdownbutton->tooltip("Previous month");
        monthdownbutton->shortcut(0x8006d);
        monthdownbutton->color(FL_INACTIVE_COLOR);
        monthdownbutton->selection_color(FL_LIGHT1);
        monthdownbutton->labelcolor(FL_LIGHT1);
        monthdownbutton->callback((Fl_Callback*)cal, (void*)(0));
      } // Fl_Button* monthdownbutton
      { monthupbutton = new Fl_Button(125, 90, 20, 20, "@>");
        monthupbutton->tooltip("Next month");
        monthupbutton->shortcut(0x8004d);
        monthupbutton->color(FL_INACTIVE_COLOR);
        monthupbutton->selection_color(FL_LIGHT1);
        monthupbutton->labelcolor(FL_LIGHT1);
        monthupbutton->callback((Fl_Callback*)cal, (void*)(0));
      } // Fl_Button* monthupbutton
      { Fl_Box* o = new Fl_Box(5, 115, 20, 20, "S");
        o->tooltip("Sunday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(25, 115, 20, 20, "M");
        o->tooltip("Monday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(45, 115, 20, 20, "T");
        o->tooltip("Tuesday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(65, 115, 20, 20, "W");
        o->tooltip("Wednesday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(85, 115, 20, 20, "T");
        o->tooltip("Thursday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(105, 115, 20, 20, "F");
        o->tooltip("Friday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(125, 115, 20, 20, "S");
        o->tooltip("Saturday");
        o->box(FL_EMBOSSED_BOX);
        o->color(FL_LIGHT1);
        o->selection_color(FL_LIGHT1);
        o->labelsize(12);
        o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { day[1] = new Fl_Button(5, 140, 20, 20);
        day[1]->selection_color(FL_LIGHT1);
        day[1]->labelfont(8);
        day[1]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[1]
      { day[2] = new Fl_Button(25, 140, 20, 20);
        day[2]->selection_color(FL_LIGHT1);
        day[2]->labelfont(8);
        day[2]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[2]
      { day[3] = new Fl_Button(45, 140, 20, 20);
        day[3]->selection_color(FL_LIGHT1);
        day[3]->labelfont(8);
        day[3]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[3]
      { day[4] = new Fl_Button(65, 140, 20, 20);
        day[4]->selection_color(FL_LIGHT1);
        day[4]->labelfont(8);
        day[4]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[4]
      { day[5] = new Fl_Button(85, 140, 20, 20);
        day[5]->selection_color(FL_LIGHT1);
        day[5]->labelfont(8);
        day[5]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[5]
      { day[6] = new Fl_Button(105, 140, 20, 20);
        day[6]->selection_color(FL_LIGHT1);
        day[6]->labelfont(8);
        day[6]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[6]
      { day[7] = new Fl_Button(125, 140, 20, 20);
        day[7]->selection_color(FL_LIGHT1);
        day[7]->labelfont(8);
        day[7]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[7]
      { day[8] = new Fl_Button(5, 160, 20, 20);
        day[8]->selection_color(FL_LIGHT1);
        day[8]->labelfont(8);
        day[8]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[8]
      { day[9] = new Fl_Button(25, 160, 20, 20);
        day[9]->selection_color(FL_LIGHT1);
        day[9]->labelfont(8);
        day[9]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[9]
      { day[10] = new Fl_Button(45, 160, 20, 20);
        day[10]->selection_color(FL_LIGHT1);
        day[10]->labelfont(8);
        day[10]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[10]
      { day[11] = new Fl_Button(65, 160, 20, 20);
        day[11]->selection_color(FL_LIGHT1);
        day[11]->labelfont(8);
        day[11]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[11]
      { day[12] = new Fl_Button(85, 160, 20, 20);
        day[12]->selection_color(FL_LIGHT1);
        day[12]->labelfont(8);
        day[12]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[12]
      { day[13] = new Fl_Button(105, 160, 20, 20);
        day[13]->selection_color(FL_LIGHT1);
        day[13]->labelfont(8);
        day[13]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[13]
      { day[14] = new Fl_Button(125, 160, 20, 20);
        day[14]->selection_color(FL_LIGHT1);
        day[14]->labelfont(8);
        day[14]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[14]
      { day[15] = new Fl_Button(5, 180, 20, 20);
        day[15]->selection_color(FL_LIGHT1);
        day[15]->labelfont(8);
        day[15]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[15]
      { day[16] = new Fl_Button(25, 180, 20, 20);
        day[16]->selection_color(FL_LIGHT1);
        day[16]->labelfont(8);
        day[16]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[16]
      { day[17] = new Fl_Button(45, 180, 20, 20);
        day[17]->selection_color(FL_LIGHT1);
        day[17]->labelfont(8);
        day[17]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[17]
      { day[18] = new Fl_Button(65, 180, 20, 20);
        day[18]->selection_color(FL_LIGHT1);
        day[18]->labelfont(8);
        day[18]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[18]
      { day[19] = new Fl_Button(85, 180, 20, 20);
        day[19]->selection_color(FL_LIGHT1);
        day[19]->labelfont(8);
        day[19]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[19]
      { day[20] = new Fl_Button(105, 180, 20, 20);
        day[20]->selection_color(FL_LIGHT1);
        day[20]->labelfont(8);
        day[20]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[20]
      { day[21] = new Fl_Button(125, 180, 20, 20);
        day[21]->selection_color(FL_LIGHT1);
        day[21]->labelfont(8);
        day[21]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[21]
      { day[22] = new Fl_Button(5, 200, 20, 20);
        day[22]->selection_color(FL_LIGHT1);
        day[22]->labelfont(8);
        day[22]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[22]
      { day[23] = new Fl_Button(25, 200, 20, 20);
        day[23]->selection_color(FL_LIGHT1);
        day[23]->labelfont(8);
        day[23]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[23]
      { day[24] = new Fl_Button(45, 200, 20, 20);
        day[24]->selection_color(FL_LIGHT1);
        day[24]->labelfont(8);
        day[24]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[24]
      { day[25] = new Fl_Button(65, 200, 20, 20);
        day[25]->selection_color(FL_LIGHT1);
        day[25]->labelfont(8);
        day[25]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[25]
      { day[26] = new Fl_Button(85, 200, 20, 20);
        day[26]->selection_color(FL_LIGHT1);
        day[26]->labelfont(8);
        day[26]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[26]
      { day[27] = new Fl_Button(105, 200, 20, 20);
        day[27]->selection_color(FL_LIGHT1);
        day[27]->labelfont(8);
        day[27]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[27]
      { day[28] = new Fl_Button(125, 200, 20, 20);
        day[28]->selection_color(FL_LIGHT1);
        day[28]->labelfont(8);
        day[28]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[28]
      { day[29] = new Fl_Button(5, 220, 20, 20);
        day[29]->selection_color(FL_LIGHT1);
        day[29]->labelfont(8);
        day[29]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[29]
      { day[30] = new Fl_Button(25, 220, 20, 20);
        day[30]->selection_color(FL_LIGHT1);
        day[30]->labelfont(8);
        day[30]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[30]
      { day[31] = new Fl_Button(45, 220, 20, 20);
        day[31]->selection_color(FL_LIGHT1);
        day[31]->labelfont(8);
        day[31]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[31]
      { day[32] = new Fl_Button(65, 220, 20, 20);
        day[32]->selection_color(FL_LIGHT1);
        day[32]->labelfont(8);
        day[32]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[32]
      { day[33] = new Fl_Button(85, 220, 20, 20);
        day[33]->selection_color(FL_LIGHT1);
        day[33]->labelfont(8);
        day[33]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[33]
      { day[34] = new Fl_Button(105, 220, 20, 20);
        day[34]->selection_color(FL_LIGHT1);
        day[34]->labelfont(8);
        day[34]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[34]
      { day[35] = new Fl_Button(125, 220, 20, 20);
        day[35]->selection_color(FL_LIGHT1);
        day[35]->labelfont(8);
        day[35]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[35]
      { day[36] = new Fl_Button(5, 240, 20, 20);
        day[36]->selection_color(FL_LIGHT1);
        day[36]->labelfont(8);
        day[36]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[36]
      { day[37] = new Fl_Button(25, 240, 20, 20);
        day[37]->selection_color(FL_LIGHT1);
        day[37]->labelfont(8);
        day[37]->callback((Fl_Callback*)datebutton, (void*)(0));
      } // Fl_Button* day[37]
      { currentdate = new Fl_Box(5, 265, 140, 20);
        currentdate->box(FL_DOWN_BOX);
        currentdate->color(FL_LIGHT3);
        currentdate->labelfont(8);
        currentdate->labelsize(12);
      } // Fl_Box* currentdate
      { exitbut = new Fl_Button(5, 300, 55, 20, "E&xit!");
        exitbut->tooltip("Close and exit The Daily Journal - Alt+x");
        exitbut->labelsize(12);
        exitbut->callback((Fl_Callback*)buttons);
      } // Fl_Button* exitbut
      { helpbut = new Fl_Button(90, 300, 55, 20, "Help");
        helpbut->labelsize(12);
        helpbut->callback((Fl_Callback*)buttons);
        helpbut->hide();
      } // Fl_Button* helpbut
      o->resizable(NULL);
      calgroup->end();
    } // Fl_Group* calgroup
    { basetab = new CMultiTabs(155, 2, 590, 293);
      basetab->box(FL_UP_BOX);
      basetab->color(FL_BACKGROUND_COLOR);
      basetab->selection_color(FL_BACKGROUND_COLOR);
      basetab->labeltype(FL_NORMAL_LABEL);
      basetab->labelfont(0);
      basetab->labelsize(14);
      basetab->labelcolor(FL_FOREGROUND_COLOR);
      basetab->callback((Fl_Callback*)tab_cb);
      basetab->align(Fl_Align(FL_ALIGN_TOP));
      basetab->when(FL_WHEN_RELEASE);
      { journaltab = new Fl_Group(160, 30, 575, 260, "Journal");
        journaltab->labelsize(13);
        journaltab->hide();
        { prevnote = new Fl_Button(165, 35, 25, 25, "@<");
          prevnote->tooltip("Previous day with a note");
          prevnote->callback((Fl_Callback*)note_buttons);
        } // Fl_Button* prevnote
        { nextnote = new Fl_Button(190, 35, 25, 25, "@>");
          nextnote->tooltip("Next day with a note");
          nextnote->callback((Fl_Callback*)note_buttons);
        } // Fl_Button* nextnote
        { notedaydatedisplayed1 = new Fl_Box(220, 35, 200, 20);
          notedaydatedisplayed1->box(FL_EMBOSSED_BOX);
          notedaydatedisplayed1->color((Fl_Color)214);
          notedaydatedisplayed1->labelfont(1);
          notedaydatedisplayed1->labelsize(12);
          notedaydatedisplayed1->align(Fl_Align(132|FL_ALIGN_INSIDE));
        } // Fl_Box* notedaydatedisplayed1
        { todaysholiday1 = new Fl_Box(425, 35, 310, 20);
          todaysholiday1->box(FL_EMBOSSED_BOX);
          todaysholiday1->color((Fl_Color)214);
          todaysholiday1->labelfont(1);
          todaysholiday1->labelsize(12);
          todaysholiday1->align(Fl_Align(132|FL_ALIGN_INSIDE));
          todaysholiday1->hide();
        } // Fl_Box* todaysholiday1
        { Fl_Text_Editor* o = noteditor = new Fl_Text_Editor(220, 60, 515, 230);
          noteditor->box(FL_DOWN_BOX);
          noteditor->color((Fl_Color)214);
          o->textfont(FL_TIMES);
          o->textsize(12);
        } // Fl_Text_Editor* noteditor
        journaltab->end();
      } // Fl_Group* journaltab
      { apptab = new Fl_Group(160, 30, 575, 260, "Appointments");
        apptab->labelsize(13);
        apptab->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        apptab->hide();
        { notedaydatedisplayed2 = new Fl_Box(220, 35, 200, 20);
          notedaydatedisplayed2->box(FL_EMBOSSED_BOX);
          notedaydatedisplayed2->color((Fl_Color)167);
          notedaydatedisplayed2->labelfont(1);
          notedaydatedisplayed2->labelsize(12);
          notedaydatedisplayed2->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* notedaydatedisplayed2
        { todaysholiday2 = new Fl_Box(425, 35, 305, 20);
          todaysholiday2->box(FL_EMBOSSED_BOX);
          todaysholiday2->color((Fl_Color)167);
          todaysholiday2->labelfont(1);
          todaysholiday2->labelsize(12);
          todaysholiday2->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          todaysholiday2->hide();
        } // Fl_Box* todaysholiday2
        { appttime[0] = new Fl_Box(220, 60, 80, 20);
          appttime[0]->tooltip("Appointment time (in 24hr format)");
          appttime[0]->box(FL_BORDER_BOX);
          appttime[0]->color((Fl_Color)207);
          appttime[0]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[0]->labelsize(13);
          appttime[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[0]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[0]
        { apptname[0] = new Fl_Box(305, 60, 425, 20);
          apptname[0]->tooltip("Description of the appointment");
          apptname[0]->box(FL_BORDER_BOX);
          apptname[0]->color((Fl_Color)207);
          apptname[0]->labelsize(13);
          apptname[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[0]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[0]
        { appttime[1] = new Fl_Box(220, 80, 80, 20);
          appttime[1]->tooltip("Appointment time (in 24hr format)");
          appttime[1]->box(FL_BORDER_BOX);
          appttime[1]->color((Fl_Color)207);
          appttime[1]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[1]->labelsize(13);
          appttime[1]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[1]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[1]
        { apptname[1] = new Fl_Box(305, 80, 425, 20);
          apptname[1]->tooltip("Description of the appointment");
          apptname[1]->box(FL_BORDER_BOX);
          apptname[1]->color((Fl_Color)207);
          apptname[1]->labelsize(13);
          apptname[1]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[1]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[1]
        { appttime[2] = new Fl_Box(220, 100, 80, 20);
          appttime[2]->tooltip("Appointment time (in 24hr format)");
          appttime[2]->box(FL_BORDER_BOX);
          appttime[2]->color((Fl_Color)207);
          appttime[2]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[2]->labelsize(13);
          appttime[2]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[2]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[2]
        { apptname[2] = new Fl_Box(305, 100, 425, 20);
          apptname[2]->tooltip("Description of the appointment");
          apptname[2]->box(FL_BORDER_BOX);
          apptname[2]->color((Fl_Color)207);
          apptname[2]->labelsize(13);
          apptname[2]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[2]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[2]
        { appttime[3] = new Fl_Box(220, 120, 80, 20);
          appttime[3]->tooltip("Appointment time (in 24hr format)");
          appttime[3]->box(FL_BORDER_BOX);
          appttime[3]->color((Fl_Color)207);
          appttime[3]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[3]->labelsize(13);
          appttime[3]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[3]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[3]
        { apptname[3] = new Fl_Box(305, 120, 425, 20);
          apptname[3]->tooltip("Description of the appointment");
          apptname[3]->box(FL_BORDER_BOX);
          apptname[3]->color((Fl_Color)207);
          apptname[3]->labelsize(13);
          apptname[3]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[3]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[3]
        { appttime[4] = new Fl_Box(220, 140, 80, 20);
          appttime[4]->tooltip("Appointment time (in 24hr format)");
          appttime[4]->box(FL_BORDER_BOX);
          appttime[4]->color((Fl_Color)207);
          appttime[4]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[4]->labelsize(13);
          appttime[4]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[4]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[4]
        { apptname[4] = new Fl_Box(305, 140, 425, 20);
          apptname[4]->tooltip("Description of the appointment");
          apptname[4]->box(FL_BORDER_BOX);
          apptname[4]->color((Fl_Color)207);
          apptname[4]->labelsize(13);
          apptname[4]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[4]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[4]
        { appttime[5] = new Fl_Box(220, 160, 80, 20);
          appttime[5]->tooltip("Appointment time (in 24hr format)");
          appttime[5]->box(FL_BORDER_BOX);
          appttime[5]->color((Fl_Color)207);
          appttime[5]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[5]->labelsize(13);
          appttime[5]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[5]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[5]
        { apptname[5] = new Fl_Box(305, 160, 425, 20);
          apptname[5]->tooltip("Description of the appointment");
          apptname[5]->box(FL_BORDER_BOX);
          apptname[5]->color((Fl_Color)207);
          apptname[5]->labelsize(13);
          apptname[5]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[5]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[5]
        { appttime[6] = new Fl_Box(220, 180, 80, 20);
          appttime[6]->tooltip("Appointment time (in 24hr format)");
          appttime[6]->box(FL_BORDER_BOX);
          appttime[6]->color((Fl_Color)207);
          appttime[6]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[6]->labelsize(13);
          appttime[6]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[6]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[6]
        { apptname[6] = new Fl_Box(305, 180, 425, 20);
          apptname[6]->tooltip("Description of the appointment");
          apptname[6]->box(FL_BORDER_BOX);
          apptname[6]->color((Fl_Color)207);
          apptname[6]->labelsize(13);
          apptname[6]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[6]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[6]
        { appttime[7] = new Fl_Box(220, 200, 80, 20);
          appttime[7]->tooltip("Appointment time (in 24hr format)");
          appttime[7]->box(FL_BORDER_BOX);
          appttime[7]->color((Fl_Color)207);
          appttime[7]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[7]->labelsize(13);
          appttime[7]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[7]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[7]
        { apptname[7] = new Fl_Box(305, 200, 425, 20);
          apptname[7]->tooltip("Description of the appointment");
          apptname[7]->box(FL_BORDER_BOX);
          apptname[7]->color((Fl_Color)207);
          apptname[7]->labelsize(13);
          apptname[7]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[7]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[7]
        { appttime[8] = new Fl_Box(220, 220, 80, 20);
          appttime[8]->tooltip("Appointment time (in 24hr format)");
          appttime[8]->box(FL_BORDER_BOX);
          appttime[8]->color((Fl_Color)207);
          appttime[8]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[8]->labelsize(13);
          appttime[8]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[8]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[8]
        { apptname[8] = new Fl_Box(305, 220, 425, 20);
          apptname[8]->tooltip("Description of the appointment");
          apptname[8]->box(FL_BORDER_BOX);
          apptname[8]->color((Fl_Color)207);
          apptname[8]->labelsize(13);
          apptname[8]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[8]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[8]
        { appttime[9] = new Fl_Box(220, 240, 80, 20);
          appttime[9]->tooltip("Appointment time (in 24hr format)");
          appttime[9]->box(FL_BORDER_BOX);
          appttime[9]->color((Fl_Color)207);
          appttime[9]->selection_color(FL_BACKGROUND2_COLOR);
          appttime[9]->labelsize(13);
          appttime[9]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          appttime[9]->when(FL_WHEN_CHANGED);
        } // Fl_Box* appttime[9]
        { apptname[9] = new Fl_Box(305, 240, 425, 20);
          apptname[9]->tooltip("Description of the appointment");
          apptname[9]->box(FL_BORDER_BOX);
          apptname[9]->color((Fl_Color)207);
          apptname[9]->labelsize(13);
          apptname[9]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          apptname[9]->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptname[9]
        { appttimein = new Fl_Int_Input(220, 270, 80, 20, "Input:");
          appttimein->tooltip("Enter time (in 24 hr format)");
          appttimein->type(2);
          appttimein->color((Fl_Color)167);
          appttimein->selection_color(FL_BACKGROUND2_COLOR);
          appttimein->labelsize(13);
          appttimein->textfont(8);
          appttimein->textsize(12);
          appttimein->callback((Fl_Callback*)appt_cb);
          appttimein->when(FL_WHEN_CHANGED);
        } // Fl_Int_Input* appttimein
        { apptnamein = new Fl_Input(305, 270, 425, 20);
          apptnamein->tooltip("Enter text describing the appointment (upto 60 characters, please)");
          apptnamein->color((Fl_Color)167);
          apptnamein->selection_color((Fl_Color)9);
          apptnamein->labelsize(13);
          apptnamein->textfont(8);
          apptnamein->textsize(12);
          apptnamein->callback((Fl_Callback*)appt_cb);
          apptnamein->when(FL_WHEN_CHANGED);
        } // Fl_Input* apptnamein
        { apptaddbut = new Fl_Button(165, 160, 45, 25, "&Add");
          apptaddbut->tooltip("Add the data on the last line as a new appointment - Alt+a");
          apptaddbut->labelsize(13);
          apptaddbut->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* apptaddbut
        { apptmodifybut = new Fl_Button(165, 190, 45, 25, "&Modify");
          apptmodifybut->tooltip("Modify this appointment - Alt+m");
          apptmodifybut->labelsize(13);
          apptmodifybut->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* apptmodifybut
        { apptdeletebut = new Fl_Button(165, 220, 45, 25, "&Delete");
          apptdeletebut->tooltip("Delete this appointment - Alt+d");
          apptdeletebut->labelsize(13);
          apptdeletebut->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* apptdeletebut
        { apptprevbut = new Fl_Button(175, 74, 25, 25, "@2<");
          apptprevbut->tooltip("Previous appointment");
          apptprevbut->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* apptprevbut
        { apptnextbut = new Fl_Button(175, 100, 25, 25, "@2>");
          apptnextbut->tooltip("Next appointment");
          apptnextbut->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* apptnextbut
        { apptnum = new Fl_Box(165, 130, 45, 25);
          apptnum->tooltip("Appointment displayed on the last line/Total number");
          apptnum->box(FL_EMBOSSED_BOX);
          apptnum->color((Fl_Color)167);
          apptnum->labelsize(13);
          apptnum->callback((Fl_Callback*)appt_cb);
          apptnum->when(FL_WHEN_CHANGED);
        } // Fl_Box* apptnum
        { prevdayapp = new Fl_Button(165, 35, 25, 25, "@<");
          prevdayapp->tooltip("Previous day with appointments");
          prevdayapp->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* prevdayapp
        { nextdayapp = new Fl_Button(190, 35, 25, 25, "@>");
          nextdayapp->tooltip("Next day with appointments");
          nextdayapp->callback((Fl_Callback*)appt_cb);
        } // Fl_Button* nextdayapp
        apptab->end();
      } // Fl_Group* apptab
      { contab = new Fl_Group(160, 30, 575, 260, "Contacts");
        contab->labelsize(13);
        contab->hide();
        { contactkey = new Fl_Box(240, 35, 335, 20);
          contactkey->tooltip("This box displays the first line of the contact data");
          contactkey->box(FL_EMBOSSED_BOX);
          contactkey->color((Fl_Color)230);
          contactkey->selection_color(FL_DARK1);
          contactkey->labelsize(13);
          contactkey->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* contactkey
        { contactkeylistbut = new Fl_Button(220, 35, 20, 20, "@2>");
          contactkeylistbut->tooltip("Click to show list of Contacts");
          contactkeylistbut->callback((Fl_Callback*)contact_cb);
        } // Fl_Button* contactkeylistbut
        { contacteditor = new Fl_Text_Editor(220, 60, 515, 230, "Details");
          contacteditor->box(FL_DOWN_BOX);
          contacteditor->color((Fl_Color)247);
          contacteditor->labelsize(13);
          contacteditor->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
        } // Fl_Text_Editor* contacteditor
        { contactkeylist = new Fl_Select_Browser(240, 55, 335, 130);
          contactkeylist->tooltip("This box displays the first line of each record");
          contactkeylist->type(2);
          contactkeylist->box(FL_NO_BOX);
          contactkeylist->color((Fl_Color)230);
          contactkeylist->selection_color(FL_SELECTION_COLOR);
          contactkeylist->labeltype(FL_NORMAL_LABEL);
          contactkeylist->labelfont(0);
          contactkeylist->labelsize(13);
          contactkeylist->labelcolor(FL_FOREGROUND_COLOR);
          contactkeylist->textfont(8);
          contactkeylist->textsize(12);
          contactkeylist->callback((Fl_Callback*)contact_cb);
          contactkeylist->align(Fl_Align(FL_ALIGN_BOTTOM));
          contactkeylist->when(FL_WHEN_RELEASE_ALWAYS);
          contactkeylist->hide();
        } // Fl_Select_Browser* contactkeylist
        { contactprevbut = new Fl_Button(175, 75, 25, 25, "@2<");
          contactprevbut->tooltip("Previous contact");
          contactprevbut->callback((Fl_Callback*)contact_cb);
        } // Fl_Button* contactprevbut
        { contactnextbut = new Fl_Button(175, 100, 25, 25, "@2>");
          contactnextbut->tooltip("Next contact");
          contactnextbut->callback((Fl_Callback*)contact_cb);
        } // Fl_Button* contactnextbut
        { contactnum = new Fl_Box(165, 130, 45, 25);
          contactnum->tooltip("Contact displayed/Total number");
          contactnum->box(FL_EMBOSSED_BOX);
          contactnum->color((Fl_Color)230);
          contactnum->labelsize(13);
          contactnum->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          contactnum->when(FL_WHEN_CHANGED);
        } // Fl_Box* contactnum
        { contactaddbut = new Fl_Button(165, 160, 45, 25, "&Add");
          contactaddbut->tooltip("Add a new contact - Alt+a");
          contactaddbut->labelsize(13);
          contactaddbut->callback((Fl_Callback*)contact_cb);
          contactaddbut->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Button* contactaddbut
        { contactmodifybut = new Fl_Button(165, 190, 45, 25, "&Modify");
          contactmodifybut->tooltip("Modify this contact - Alt+m");
          contactmodifybut->labelsize(13);
          contactmodifybut->callback((Fl_Callback*)contact_cb);
        } // Fl_Button* contactmodifybut
        { contactdeletebut = new Fl_Button(165, 220, 45, 25, "&Delete");
          contactdeletebut->tooltip("Delete this contact - Alt+d");
          contactdeletebut->labelsize(13);
          contactdeletebut->callback((Fl_Callback*)contact_cb);
        } // Fl_Button* contactdeletebut
        contab->end();
      } // Fl_Group* contab
      { todotab = new Fl_Group(160, 30, 575, 260, "ToDo");
        todotab->color((Fl_Color)29);
        todotab->labelsize(13);
        todotab->hide();
        { Fl_Text_Editor* o = todoeditor = new Fl_Text_Editor(220, 60, 515, 230);
          todoeditor->box(FL_DOWN_BOX);
          todoeditor->color((Fl_Color)215);
          todoeditor->textsize(12);
          o->textfont(FL_TIMES);
          o->textsize(12);
        } // Fl_Text_Editor* todoeditor
        todotab->end();
      } // Fl_Group* todotab
      { holtab = new Fl_Group(160, 30, 575, 260, "Holidays");
        holtab->labelsize(13);
        holtab->hide();
        { holdate[0] = new Fl_Box(220, 60, 45, 20);
          holdate[0]->tooltip("Date");
          holdate[0]->box(FL_BORDER_BOX);
          holdate[0]->color((Fl_Color)246);
          holdate[0]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[0]->labelsize(13);
          holdate[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[0]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[0]
        { holmonth[0] = new Fl_Box(270, 60, 65, 20);
          holmonth[0]->tooltip("Month");
          holmonth[0]->box(FL_BORDER_BOX);
          holmonth[0]->color((Fl_Color)246);
          holmonth[0]->labelsize(13);
          holmonth[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[0]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[0]
        { holtext[0] = new Fl_Box(340, 60, 390, 20);
          holtext[0]->tooltip("Description of holiday or anniversary");
          holtext[0]->box(FL_BORDER_BOX);
          holtext[0]->color((Fl_Color)246);
          holtext[0]->labelsize(13);
          holtext[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[0]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[0]
        { holdate[1] = new Fl_Box(220, 80, 45, 20);
          holdate[1]->tooltip("Date");
          holdate[1]->box(FL_BORDER_BOX);
          holdate[1]->color((Fl_Color)246);
          holdate[1]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[1]->labelsize(13);
          holdate[1]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[1]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[1]
        { holmonth[1] = new Fl_Box(270, 80, 65, 20);
          holmonth[1]->tooltip("Month");
          holmonth[1]->box(FL_BORDER_BOX);
          holmonth[1]->color((Fl_Color)246);
          holmonth[1]->labelsize(13);
          holmonth[1]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[1]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[1]
        { holtext[1] = new Fl_Box(340, 80, 390, 20);
          holtext[1]->tooltip("Description of holiday or anniversary");
          holtext[1]->box(FL_BORDER_BOX);
          holtext[1]->color((Fl_Color)246);
          holtext[1]->labelsize(13);
          holtext[1]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[1]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[1]
        { holdate[2] = new Fl_Box(220, 100, 45, 20);
          holdate[2]->tooltip("Date");
          holdate[2]->box(FL_BORDER_BOX);
          holdate[2]->color((Fl_Color)246);
          holdate[2]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[2]->labelsize(13);
          holdate[2]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[2]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[2]
        { holmonth[2] = new Fl_Box(270, 100, 65, 20);
          holmonth[2]->tooltip("Month");
          holmonth[2]->box(FL_BORDER_BOX);
          holmonth[2]->color((Fl_Color)246);
          holmonth[2]->labelsize(13);
          holmonth[2]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[2]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[2]
        { holtext[2] = new Fl_Box(340, 100, 390, 20);
          holtext[2]->tooltip("Description of holiday or anniversary");
          holtext[2]->box(FL_BORDER_BOX);
          holtext[2]->color((Fl_Color)246);
          holtext[2]->labelsize(13);
          holtext[2]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[2]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[2]
        { holdate[3] = new Fl_Box(220, 120, 45, 20);
          holdate[3]->tooltip("Date");
          holdate[3]->box(FL_BORDER_BOX);
          holdate[3]->color((Fl_Color)246);
          holdate[3]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[3]->labelsize(13);
          holdate[3]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[3]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[3]
        { holmonth[3] = new Fl_Box(270, 120, 65, 20);
          holmonth[3]->tooltip("Month");
          holmonth[3]->box(FL_BORDER_BOX);
          holmonth[3]->color((Fl_Color)246);
          holmonth[3]->labelsize(13);
          holmonth[3]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[3]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[3]
        { holtext[3] = new Fl_Box(340, 120, 390, 20);
          holtext[3]->tooltip("Description of holiday or anniversary");
          holtext[3]->box(FL_BORDER_BOX);
          holtext[3]->color((Fl_Color)246);
          holtext[3]->labelsize(13);
          holtext[3]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[3]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[3]
        { holdate[4] = new Fl_Box(220, 140, 45, 20);
          holdate[4]->tooltip("Date");
          holdate[4]->box(FL_BORDER_BOX);
          holdate[4]->color((Fl_Color)246);
          holdate[4]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[4]->labelsize(13);
          holdate[4]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[4]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[4]
        { holmonth[4] = new Fl_Box(270, 140, 65, 20);
          holmonth[4]->tooltip("Month");
          holmonth[4]->box(FL_BORDER_BOX);
          holmonth[4]->color((Fl_Color)246);
          holmonth[4]->labelsize(13);
          holmonth[4]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[4]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[4]
        { holtext[4] = new Fl_Box(340, 140, 390, 20);
          holtext[4]->tooltip("Description of holiday or anniversary");
          holtext[4]->box(FL_BORDER_BOX);
          holtext[4]->color((Fl_Color)246);
          holtext[4]->labelsize(13);
          holtext[4]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[4]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[4]
        { holdate[5] = new Fl_Box(220, 160, 45, 20);
          holdate[5]->tooltip("Date");
          holdate[5]->box(FL_BORDER_BOX);
          holdate[5]->color((Fl_Color)246);
          holdate[5]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[5]->labelsize(13);
          holdate[5]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[5]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[5]
        { holmonth[5] = new Fl_Box(270, 160, 65, 20);
          holmonth[5]->tooltip("Month");
          holmonth[5]->box(FL_BORDER_BOX);
          holmonth[5]->color((Fl_Color)246);
          holmonth[5]->labelsize(13);
          holmonth[5]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[5]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[5]
        { holtext[5] = new Fl_Box(340, 160, 390, 20);
          holtext[5]->tooltip("Description of holiday or anniversary");
          holtext[5]->box(FL_BORDER_BOX);
          holtext[5]->color((Fl_Color)246);
          holtext[5]->labelsize(13);
          holtext[5]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[5]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[5]
        { holdate[6] = new Fl_Box(220, 180, 45, 20);
          holdate[6]->tooltip("Date");
          holdate[6]->box(FL_BORDER_BOX);
          holdate[6]->color((Fl_Color)246);
          holdate[6]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[6]->labelsize(13);
          holdate[6]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[6]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[6]
        { holmonth[6] = new Fl_Box(270, 180, 65, 20);
          holmonth[6]->tooltip("Month");
          holmonth[6]->box(FL_BORDER_BOX);
          holmonth[6]->color((Fl_Color)246);
          holmonth[6]->labelsize(13);
          holmonth[6]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[6]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[6]
        { holtext[6] = new Fl_Box(340, 180, 390, 20);
          holtext[6]->tooltip("Description of holiday or anniversary");
          holtext[6]->box(FL_BORDER_BOX);
          holtext[6]->color((Fl_Color)246);
          holtext[6]->labelsize(13);
          holtext[6]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[6]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[6]
        { holdate[7] = new Fl_Box(220, 200, 45, 20);
          holdate[7]->tooltip("Date");
          holdate[7]->box(FL_BORDER_BOX);
          holdate[7]->color((Fl_Color)246);
          holdate[7]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[7]->labelsize(13);
          holdate[7]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[7]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[7]
        { holmonth[7] = new Fl_Box(270, 200, 65, 20);
          holmonth[7]->tooltip("Month");
          holmonth[7]->box(FL_BORDER_BOX);
          holmonth[7]->color((Fl_Color)246);
          holmonth[7]->labelsize(13);
          holmonth[7]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[7]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[7]
        { holtext[7] = new Fl_Box(340, 200, 390, 20);
          holtext[7]->tooltip("Description of holiday or anniversary");
          holtext[7]->box(FL_BORDER_BOX);
          holtext[7]->color((Fl_Color)246);
          holtext[7]->labelsize(13);
          holtext[7]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[7]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[7]
        { holdate[8] = new Fl_Box(220, 220, 45, 20);
          holdate[8]->tooltip("Date");
          holdate[8]->box(FL_BORDER_BOX);
          holdate[8]->color((Fl_Color)246);
          holdate[8]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[8]->labelsize(13);
          holdate[8]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[8]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[8]
        { holmonth[8] = new Fl_Box(270, 220, 65, 20);
          holmonth[8]->tooltip("Month");
          holmonth[8]->box(FL_BORDER_BOX);
          holmonth[8]->color((Fl_Color)246);
          holmonth[8]->labelsize(13);
          holmonth[8]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[8]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[8]
        { holtext[8] = new Fl_Box(340, 220, 390, 20);
          holtext[8]->tooltip("Description of holiday or anniversary");
          holtext[8]->box(FL_BORDER_BOX);
          holtext[8]->color((Fl_Color)246);
          holtext[8]->labelsize(13);
          holtext[8]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[8]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[8]
        { holdate[9] = new Fl_Box(220, 240, 45, 20);
          holdate[9]->tooltip("Date");
          holdate[9]->box(FL_BORDER_BOX);
          holdate[9]->color((Fl_Color)246);
          holdate[9]->selection_color(FL_BACKGROUND2_COLOR);
          holdate[9]->labelsize(13);
          holdate[9]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holdate[9]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holdate[9]
        { holmonth[9] = new Fl_Box(270, 240, 65, 20);
          holmonth[9]->tooltip("Month");
          holmonth[9]->box(FL_BORDER_BOX);
          holmonth[9]->color((Fl_Color)246);
          holmonth[9]->labelsize(13);
          holmonth[9]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holmonth[9]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holmonth[9]
        { holtext[9] = new Fl_Box(340, 240, 390, 20);
          holtext[9]->tooltip("Description of holiday or anniversary");
          holtext[9]->box(FL_BORDER_BOX);
          holtext[9]->color((Fl_Color)246);
          holtext[9]->labelsize(13);
          holtext[9]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          holtext[9]->when(FL_WHEN_CHANGED);
        } // Fl_Box* holtext[9]
        { holdatein = new Fl_Int_Input(220, 270, 45, 20, "Input:");
          holdatein->tooltip("Enter date (a number from 1 to 31)");
          holdatein->type(2);
          holdatein->color((Fl_Color)245);
          holdatein->labelsize(13);
          holdatein->textfont(8);
          holdatein->textsize(12);
          holdatein->callback((Fl_Callback*)hol_cb);
        } // Fl_Int_Input* holdatein
        { holmonthin = new Fl_Int_Input(270, 270, 65, 20);
          holmonthin->tooltip("Enter month (1 to 12)");
          holmonthin->type(2);
          holmonthin->color((Fl_Color)245);
          holmonthin->labelsize(13);
          holmonthin->textfont(8);
          holmonthin->textsize(12);
          holmonthin->callback((Fl_Callback*)hol_cb);
          holmonthin->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Int_Input* holmonthin
        { holtextin = new Fl_Input(340, 270, 390, 20);
          holtextin->tooltip("Enter text describing the holiday or anniversary");
          holtextin->color((Fl_Color)245);
          holtextin->selection_color((Fl_Color)9);
          holtextin->labelsize(13);
          holtextin->textfont(8);
          holtextin->textsize(12);
          holtextin->callback((Fl_Callback*)hol_cb);
          holtextin->when(FL_WHEN_CHANGED);
        } // Fl_Input* holtextin
        { holaddbut = new Fl_Button(165, 160, 45, 25, "&Add");
          holaddbut->tooltip("Add text on the last line as a new holiday or anniverdary- Alt+a");
          holaddbut->labelsize(13);
          holaddbut->callback((Fl_Callback*)hol_cb);
        } // Fl_Button* holaddbut
        { holdeletebut = new Fl_Button(165, 190, 45, 25, "&Delete");
          holdeletebut->tooltip("Delete this holiday - Alt+d");
          holdeletebut->labelsize(13);
          holdeletebut->callback((Fl_Callback*)hol_cb);
        } // Fl_Button* holdeletebut
        { holprevbut = new Fl_Button(175, 75, 25, 25, "@2<");
          holprevbut->tooltip("Previous holiday");
          holprevbut->callback((Fl_Callback*)hol_cb);
        } // Fl_Button* holprevbut
        { holnextbut = new Fl_Button(175, 100, 25, 25, "@2>");
          holnextbut->tooltip("Next holiday");
          holnextbut->callback((Fl_Callback*)hol_cb);
        } // Fl_Button* holnextbut
        { holnum = new Fl_Box(165, 130, 45, 25);
          holnum->tooltip("Holiday displayed on the last line/Total number");
          holnum->box(FL_EMBOSSED_BOX);
          holnum->color((Fl_Color)245);
          holnum->labelsize(13);
          holnum->when(FL_WHEN_CHANGED);
        } // Fl_Box* holnum
        holtab->end();
      } // Fl_Group* holtab
      { searchtab = new Fl_Group(160, 30, 575, 260, "Global Search");
        searchtab->labelsize(13);
        searchtab->hide();
        { searchtext = new Fl_Output(220, 35, 215, 20, "has been located in the");
          searchtext->tooltip("Text which was searched for");
          searchtext->box(FL_EMBOSSED_BOX);
          searchtext->color((Fl_Color)221);
          searchtext->labelsize(13);
          searchtext->textfont(8);
          searchtext->textsize(12);
          searchtext->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Output* searchtext
        { journalsearchresultlist = new Fl_Browser(220, 70, 250, 220, "journal entries for :");
          journalsearchresultlist->tooltip("Notes containing the search text. Double-click a line to see it in Journal ta\
b.");
          journalsearchresultlist->type(2);
          journalsearchresultlist->color((Fl_Color)238);
          journalsearchresultlist->labelsize(13);
          journalsearchresultlist->textsize(12);
          journalsearchresultlist->callback((Fl_Callback*)searchlistshow_cb);
          journalsearchresultlist->align(Fl_Align(133));
          journalsearchresultlist->when(FL_WHEN_ENTER_KEY_ALWAYS);
        } // Fl_Browser* journalsearchresultlist
        { apptsearchresultlist = new Fl_Browser(485, 70, 250, 220, "and appointments for : ");
          apptsearchresultlist->tooltip("Appointments containing the search text. Double-click a line to see it in App\
ointmentl tab.");
          apptsearchresultlist->type(2);
          apptsearchresultlist->color((Fl_Color)238);
          apptsearchresultlist->labelsize(13);
          apptsearchresultlist->textsize(12);
          apptsearchresultlist->callback((Fl_Callback*)searchlistshow_cb);
          apptsearchresultlist->align(Fl_Align(133));
          apptsearchresultlist->when(FL_WHEN_ENTER_KEY_ALWAYS);
        } // Fl_Browser* apptsearchresultlist
        searchtab->end();
      } // Fl_Group* searchtab
      { preftab = new Fl_Group(160, 30, 575, 260, "Preferences");
        preftab->labelsize(13);
        preftab->hide();
        { applybut = new Fl_Button(165, 220, 45, 25, "&Apply");
          applybut->tooltip("Apply the preferences to the editor windows - Alt+a");
          applybut->labelsize(13);
          applybut->callback((Fl_Callback*)pref_cb);
        } // Fl_Button* applybut
        { savebut = new Fl_Button(165, 190, 45, 25, "&Save");
          savebut->tooltip("Save the preferences  - Alt+s");
          savebut->labelsize(13);
          savebut->callback((Fl_Callback*)pref_cb);
        } // Fl_Button* savebut
        { fortune = new Fl_Check_Button(330, 160, 270, 20, "Show fortune when displaying blank notes");
          fortune->tooltip("Check this to show a quotation from the \"fortune\" program database when dis\
playing empty notes. The \"fortune\" program must be installed for this to wor\
k.");
          fortune->box(FL_FLAT_BOX);
          fortune->down_box(FL_DOWN_BOX);
          fortune->color(FL_DARK1);
          fortune->labelsize(13);
          fortune->callback((Fl_Callback*)pref_cb);
          fortune->align(Fl_Align(132|FL_ALIGN_INSIDE));
        } // Fl_Check_Button* fortune
        { fonttextbox = new Fl_Box(425, 43, 305, 60, "Sample text");
          fonttextbox->tooltip("Appearance of the text");
          fonttextbox->box(FL_DOWN_BOX);
          fonttextbox->color(FL_BACKGROUND2_COLOR);
          fonttextbox->labelsize(13);
        } // Fl_Box* fonttextbox
        { fontsizeslider = new Fl_Slider(220, 83, 200, 20, "Font size");
          fontsizeslider->tooltip("Change the size of the letters by dragging the button");
          fontsizeslider->type(1);
          fontsizeslider->color((Fl_Color)46);
          fontsizeslider->labelsize(13);
          fontsizeslider->minimum(1);
          fontsizeslider->maximum(64);
          fontsizeslider->step(1);
          fontsizeslider->value(12);
          fontsizeslider->callback((Fl_Callback*)pref_cb);
        } // Fl_Slider* fontsizeslider
        { fontslider = new Fl_Slider(220, 43, 200, 20, "Font");
          fontslider->tooltip("Change the font by dragging the button");
          fontslider->type(1);
          fontslider->color((Fl_Color)46);
          fontslider->labelsize(13);
          fontslider->maximum(15);
          fontslider->step(1);
          fontslider->callback((Fl_Callback*)pref_cb);
        } // Fl_Slider* fontslider
        { Fl_Box* o = new Fl_Box(215, 123, 515, 2);
          o->box(FL_EMBOSSED_FRAME);
        } // Fl_Box* o
        preftab->end();
      } // Fl_Group* preftab
      { helptab = new Fl_Group(160, 30, 575, 260, "Help");
        helptab->labelsize(13);
        helptab->hide();
        { help = new Fl_Help_View(220, 35, 515, 255);
        } // Fl_Help_View* help
        helptab->end();
      } // Fl_Group* helptab
      { abouttab = new Fl_Group(160, 30, 585, 260, "About");
        abouttab->labelsize(13);
        { Fl_Box* o = new Fl_Box(220, 35, 515, 30, "The Daily Journal 0.7-rc1, (c) Copyright Kartik Patel. Released under the GNU\
 General Public License. E-mail : letapk@@gmail.com");
          o->tooltip("Name and version number");
          o->box(FL_FLAT_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(335, 70, 290, 30, "The latest version can be downloaded from: https://letapk.wordpress.com");
          o->tooltip("Name and version number");
          o->box(FL_FLAT_BOX);
          o->labelfont(1);
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
        } // Fl_Box* o
        { gnugplicense = new Fl_Text_Display(220, 110, 515, 180);
          gnugplicense->tooltip("Text of the GNU General Public License");
          gnugplicense->box(FL_FLAT_BOX);
          gnugplicense->color((Fl_Color)46);
          gnugplicense->labelfont(1);
          gnugplicense->labelsize(12);
          gnugplicense->textfont(8);
          gnugplicense->textsize(12);
        } // Fl_Text_Display* gnugplicense
        abouttab->end();
      } // Fl_Group* abouttab
      basetab->end();
      Fl_Group::current()->resizable(basetab);
    } // CMultiTabs* basetab
    { Fl_Group* o = findgroup = new Fl_Group(150, 299, 593, 22);
      { findbut = new Fl_Button(155, 300, 75, 20, "&Search for:");
        findbut->tooltip("Click to find text entered on the right - Alt+s");
        findbut->labelsize(12);
        findbut->callback((Fl_Callback*)buttons);
      } // Fl_Button* findbut
      { findtextbox = new Fl_Input(235, 300, 505, 20);
        findtextbox->tooltip("Type the word or phrase you are looking for");
        findtextbox->labelfont(8);
        findtextbox->textfont(8);
        findtextbox->textsize(12);
        findtextbox->align(Fl_Align(FL_ALIGN_CENTER));
      } // Fl_Input* findtextbox
      o->resizable(NULL);
      findgroup->end();
    } // Fl_Group* findgroup
    mainwin->end();
  } // Fl_Double_Window* mainwin
  return mainwin;
}
